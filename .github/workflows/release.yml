name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-release-notes:
    runs-on: ubuntu-latest
    outputs:
      notes: ${{ steps.collect-notes.outputs.content }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Prepare release notes
        id: collect-notes
        run: |
          python <<'PY'
import json
import os
from pathlib import Path

tag = os.environ.get('GITHUB_REF_NAME', '')
version = tag[1:] if tag.startswith('v') else tag
path = Path('web/changelog.json')
content = None
if path.exists():
    try:
        data = json.loads(path.read_text(encoding='utf-8'))
    except Exception as exc:
        print(f"::warning::Failed to parse changelog: {exc}")
    else:
        entries = []
        if isinstance(data, dict):
            for key in ('entries', 'releases', 'items'):
                value = data.get(key)
                if isinstance(value, list):
                    entries = value
                    break
            else:
                if isinstance(data.get('version'), str):
                    entries = [data]
        elif isinstance(data, list):
            entries = data
        for entry in entries:
            if not isinstance(entry, dict):
                continue
            entry_version = str(entry.get('version') or entry.get('tag') or entry.get('id') or '')
            if entry_version in {version, tag}:
                notes = entry.get('notes') or entry.get('body') or entry.get('changes')
                if isinstance(notes, list):
                    notes = '\n'.join(str(item) for item in notes)
                if notes:
                    content = f"## Release {tag}\n\n" + str(notes).strip()
                    break
if not content:
    content = f"## Release {tag}\n\nNo changelog entry found. Review commits for details."
Path('release_notes.md').write_text(content, encoding='utf-8')
PY
          {
            echo "content<<'EOF'" >> "$GITHUB_OUTPUT"
            cat release_notes.md >> "$GITHUB_OUTPUT"
            echo 'EOF' >> "$GITHUB_OUTPUT"
          }

  create-release:
    runs-on: ubuntu-latest
    needs: build-release-notes
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create GitHub release
        id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ${{ needs.build-release-notes.outputs.notes }}

      - name: Upload lesson references
        if: ${{ always() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          shopt -s nullglob
          files=(data/lessons/*.jsonl)
          if [ ${#files[@]} -gt 0 ]; then
              gh release upload "${GITHUB_REF_NAME}" "${files[@]}" --clobber
          else
              echo "No lesson files to upload"
          fi
